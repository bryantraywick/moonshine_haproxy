global
  # maximum number of simultaneous active connections from an upstream web server
  maxconn <%= options[:maxconn] || 4096 %>

  log   <%= options[:syslog_host] || '127.0.0.1' %>   <%= options[:syslog_facility] || 'local0' %> <%= options[:log_level] || 'info' %>

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  #debug

  <%= options[:globals].join("\n") if options[:globals] %>

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Distribute incoming requests between Mongrels by connection count
  balance leastconn

  # Maximum number of simultaneous active connections from an upstream web server 
  # per service
  maxconn <%= options[:maxconn_service] || 4096 %>

  # Log details about odd HTTP requests
  option httplog
  option log-separate-errors

  # Abort request if client closes its output channel while waiting for the 
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # Enable insertion of the X-Forwarded-For header to requests sent to servers
  option forwardfor

  # Check if a "Connection: close" header is already set in each direction,
  # and will add one if missing.
  option forceclose
  option httpclose

  timeout client <%= options[:client_timeout] || '4s'%>

  timeout connect <%= options[:connect_timeout] || '15s'%>

  timeout server <%= options[:server_timeout] || '15s'%>

  timeout check <%= options[:check_timeout] || '10s'%>

  # Remove the server from the farm gracefully if the health check URI returns
  # a 404. This is useful for rolling restarts.
  option httpchk
  http-check disable-on-404

  # Balance requests between all backup servers instead of using only the first one.
  option allbackups

  # Enable the statistics page 
  stats enable
  stats uri     /haproxy?stats

  # Create a monitorable URI which returns a 200 if haproxy is up
  monitor-uri /haproxy-monitor

  <%= options[:defaults].join("\n") if options[:defaults] %>

<% options.fetch(:backends, []).each do |backend| %>
backend <%= backend[:name] %>
  <%= "balance #{backend[:balance]}" if backend[:balance] %>
  <%= backend[:options].join("\n") if backend[:options] %>
  <% backend[:servers].each do |server| %>
  server <%= server[:name] %> <%= server[:url] %> <%= "weight #{server[:weight]} " if server[:weight] %><%= "maxconn #{server[:maxconn]} " if server[:maxconn] %> <%= server[:options].join(" ") if server[:options] %>
  <% end %>
<% end %>

<% options.fetch(:frontends, []).each do |frontend| %>
frontend <%= frontend[:name] %>
  bind <%= frontend[:bind] %>
  <%= "mode #{frontend[:mode]}" if frontend[:mode] %>
  <%= "log #{frontend[:log]}" if frontend[:log] %>
  <%= frontend.fetch(:options, []).join("\n") %>

  <% if frontend[:default_backend] %>
  default_backend <%= frontend[:default_backend] %>
  <% end %>

  # ACLs
  #
  # Defines rules used to assign requests to backends later

  <% frontend.fetch(:acl_list, []).each do |acl| %>
  <%= "acl #{acl}" %>
  <% end %>

  # Rules
  #
  # use_backend is used with ACLs from above to control which requests go to 
  # which backends
  #
  # There may be as many "use_backend" rules as desired. All of these rules are
  # evaluated in their declaration order, and the first one which matches will
  # assign the backend.

  <% frontend.fetch(:use_backend_rules, []).each do |rule| %>
  <%= "use_backend #{rule}" %>
  <% end %>
<% end %>